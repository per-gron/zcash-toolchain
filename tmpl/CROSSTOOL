major_version: "1"
minor_version: "0"
default_target_cpu: "k8"

default_toolchain {
  cpu: "k8"
  toolchain_identifier: "x86_64-unknown-linux-gnu"
}

toolchain {
  toolchain_identifier: "x86_64-unknown-linux-gnu"
  abi_version: "local"
  abi_libc_version: "glibc"
  builtin_sysroot: ""
  compiler: "compiler"
  host_system_name: "local"
  needsPic: false

  supports_gold_linker: true
  linker_flag: "-fuse-ld=gold"
  supports_start_end_lib: true
  linking_mode_flags {
    mode: DYNAMIC
    linker_flag: "-lstdc++"
  }
  linking_mode_flags {
    mode: FULLY_STATIC
    linker_flag: "-lstdc++"
  }
  linking_mode_flags {
    mode: MOSTLY_STATIC
    # Make sure to statically link against libstdc++ and libgcc_s, to minimize
    # dependence on particular versions of system libraries, without going to
    # the extreme of static linking of libc, which is a lot trickier.
    #
    # -static-libstdc++ only works when invoking GCC with g++, which Bazel
    # doesn't use. Instead, force static linking against libstdc++ like this:
    linker_flag: "-l:libstdc++.a"
    # Linking statically against libgcc improves portability of executables that
    # this toolchain creates, but it comes with caveats. For an argument in favor
    # of dynamic linking libgcc see https://gcc.gnu.org/ml/gcc/2000-04/msg00610.html
    #
    # Essentially: It is dangerous to statically link libgcc if you end up with
    # shared libraries/executables that have their own different versions of libgcc
    # exception handling in the same executable. When linking in MOSTLY_STATIC mode,
    # this toolchain is designed to be used in a way that the only library that is
    # linked dynamically is glibc, and all other code is linked statically and
    # compiled with the same compiler. Because glibc doesn't use exceptions (it's C)
    # linking statically against libgcc is safe.
    linker_flag: "-static-libgcc"
  }

  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  target_libc: "glibc"
  target_cpu: "k8"
  target_system_name: "local"
  cxx_flag: "-std=c++0x"
  compiler_flag: "-fPIC"
  linker_flag: "-pie"
  linker_flag: "-Wl,-no-as-needed"
  linker_flag: "-Wl,-z,relro,-z,now"
  linker_flag: "-Wl,-z,noexecstack"
  linker_flag: "-pass-exit-codes"
  linker_flag: "-lm"
  linker_flag: "-lanl"

  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/7.2.0"
  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/7.2.0/x86_64-unknown-linux-gnu"
  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/7.2.0/backward"
  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include"
  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/lib/gcc/x86_64-unknown-linux-gnu/7.2.0/include"
  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/lib/gcc/x86_64-unknown-linux-gnu/7.2.0/include-fixed"
  cxx_builtin_include_directory: "x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr/include"

  # These -isystem include paths are there to make sure that when the compiler
  # writes out the list of header files that were read, the paths are relative.
  # This is necessary to make the cxx_builtin_include_directory declarations
  # above work.
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/7.2.0"
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/7.2.0/x86_64-unknown-linux-gnu"
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/7.2.0/backward"
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/lib/gcc/x86_64-unknown-linux-gnu/7.2.0/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/lib/gcc/x86_64-unknown-linux-gnu/7.2.0/include-fixed"
  compiler_flag: "-isystem"
  compiler_flag: "external/zcash_cc_toolchain/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/sysroot/usr/include"

  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  unfiltered_cxx_flag: "-fno-canonical-system-headers"
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""
  compiler_flag: "-fstack-protector-all"
  compiler_flag: "-Wall"
  compiler_flag: "-Wunused-but-set-parameter"
  compiler_flag: "-Wno-free-nonheap-object"
  compiler_flag: "-fno-omit-frame-pointer"
  compiler_flag: "-Wno-builtin-declaration-mismatch"
  compiler_flag: "-fwrapv"
  compiler_flag: "-fno-strict-aliasing"
  tool_path {name: "ld" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-ld" }
  tool_path {name: "cpp" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-cpp" }
  tool_path {name: "gcov" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-gcov" }
  tool_path {name: "nm" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-nm" }
  tool_path {name: "objcopy" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-objcopy" }
  tool_path {name: "objdump" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-objdump" }
  tool_path {name: "strip" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-strip" }
  tool_path {name: "gcc" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-gcc" }
  tool_path {name: "ar" path: "x86_64-unknown-linux-gnu/bin/x86_64-unknown-linux-gnu-ar" }

  compilation_mode_flags {
    mode: DBG
    compiler_flag: "-Og"
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    compiler_flag: "-g0"
    compiler_flag: "-O3"
    compiler_flag: "-D_FORTIFY_SOURCE=2"
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
    # Intentionally do not declare the NDEBUG preprocessor flag; Zcash should be
    # compiled with assertions enabled.
    # compiler_flag: "-DNDEBUG"
  }

  feature {
    name: 'coverage'
    provides: 'profile'
    flag_set {
      action: 'preprocess-assemble'
      action: 'c-compile'
      action: 'c++-compile'
      action: 'c++-header-parsing'
      action: 'c++-header-preprocessing'
      action: 'c++-module-compile'
      flag_group {
        flag: '-fprofile-arcs'
        flag: '-ftest-coverage'
      }
    }

    flag_set {
      action: 'c++-link-interface-dynamic-library'
      action: 'c++-link-dynamic-library'
      action: 'c++-link-executable'
      flag_group {
        flag: '-lgcov'
      }
    }
  }
  
}
